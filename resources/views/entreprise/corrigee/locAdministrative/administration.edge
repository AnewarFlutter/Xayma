@include('entreprise/layout/header')
<style>
    .folder-item {
      padding: 1rem;
      border-radius: 4px;
      text-align: center;
      cursor: pointer;
      transition: background-color 0.2s;
      position: relative; /* Pour positionner l'icône de suppression */
    }
    
    .folder-item:hover {
      background-color: rgba(0,0,0,0.05);
    }
    
    .folder-name {
      font-size: 0.9rem;
      margin-top: 0.5rem;
    }
    
    .folder-details small {
      font-size: 0.75rem;
    }
    .view-list .folder-item {
        display: flex;
        width: 100%;
        align-items: center;
        padding: 0.5rem;
        margin-bottom: 0.5rem;
        border-bottom: 1px solid #eee;
      }
      
      .view-list .folder-icon {
        margin-right: 1rem;
        margin-bottom: 0 !important;
      }
      
      .view-list .folder-details {
        text-align: left;
      }
      
      .view-list .col-md-3 {
        width: 100%;
        max-width: 100%;
        flex: 0 0 100%;
      }

      .delete-icon {
        position: absolute;
        top: 10px;
        right: 10px;
        opacity: 0;
        transition: opacity 0.2s ease;
        background: rgba(255, 255, 255, 0.9);
        padding: 5px;
        border-radius: 50%;
        color: #dc3545;
        cursor: pointer;
        z-index: 1;
      }
      
      .folder-item:hover .delete-icon {
        opacity: 1;
      }
</style>
<style>
/* Variables */
:root {
  --primary-color: #4CAF50;
  --secondary-color: #2196F3; 
  --danger-color: #f44336;
  --warning-color: #ff9800;
  --success-color: #4caf50;
  --info-color: #00bcd4;
  --dark-color: #212121;
  --light-color: #f5f5f5;
  --shadow-sm: 0 2px 4px rgba(0,0,0,.1);
  --shadow-md: 0 4px 6px rgba(0,0,0,.1);
  --shadow-lg: 0 10px 15px rgba(0,0,0,.1);
  --border-radius: 8px;
}

/* Cards */
.card {
  border: none;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-md);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-lg);
}

.card-header {
  background: linear-gradient(45deg, #f8f9fa, #ffffff);
  border-bottom: 1px solid rgba(0,0,0,.05);
  padding: 1.5rem;
}

.card-header h5 {
  font-weight: 600;
  color: var(--dark-color);
  margin-bottom: 0.5rem;
}

/* Icons */
.icon-shape {
  width: 64px;
  height: 64px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: transform 0.3s ease;
}

.icon-shape:hover {
  transform: scale(1.1);
}

.icon-shape i {
  font-size: 1.5rem;
  color: white;
}

/* Gradient Backgrounds */
.bg-gradient-primary {
  background: linear-gradient(45deg, #4CAF50, #81C784);
}

.bg-gradient-success {
  background: linear-gradient(45deg, #2196F3, #64B5F6);
}

.bg-gradient-warning {
  background: linear-gradient(45deg, #ff9800, #FFB74D);
}

.bg-gradient-info {
  background: linear-gradient(45deg, #00bcd4, #4DD0E1);
}

.bg-gradient-danger {
  background: linear-gradient(45deg, #f44336, #E57373);
}

.bg-gradient-dark {
  background: linear-gradient(45deg, #212121, #484848);
}

/* Buttons */
.btn {
  padding: 0.6rem 1.2rem;
  border-radius: var(--border-radius);
  font-weight: 500;
  transition: all 0.3s ease;
}



.btn-success:hover {
  background: var(--success-color);
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.btn-danger {
  background: var(--danger-color);
  border: none;
}

.btn-danger:hover {
  background: var(--danger-color);
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

/* Text Styles */
.text-xs {
  font-size: 0.75rem;
  letter-spacing: 0.5px;
}

.font-weight-bolder {
  font-weight: 600;
}

/* Card Details */
.card-body .text-center {
  padding: 1rem 0;
}

.font-weight-bolder {
  font-size: 1.1rem;
  color: var(--dark-color);
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  .icon-shape {
    width: 48px;
    height: 48px;
  }
  
  .card-header {
    padding: 1rem;
  }
  
  .btn {
    padding: 0.5rem 1rem;
  }
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.card-body {
  animation: fadeIn 0.5s ease forwards;
}

/* Hover Effects */
.card-body .icon-shape {
  position: relative;
  overflow: hidden;
}

.card-body .icon-shape::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(255,255,255,0.1);
  border-radius: 50%;
  transform: scale(0);
  transition: transform 0.3s ease;
}

.card-body .icon-shape:hover::after {
  transform: scale(1);
}
</style>
<body class="g-sidenav-show  bg-gray-100">


    @include('entreprise/layout/nav_bar')

    <main class="main-content position-relative max-height-vh-100 h-100 border-radius-lg ">
        <!-- Navbar -->
        <nav class="navbar navbar-main navbar-expand-lg px-0 mx-3 shadow-none border-radius-xl" id="navbarBlur"
            data-scroll="true">
            <div class="container-fluid py-1 px-3">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5">
                        <li class="breadcrumb-item text-sm"><a class="opacity-5 text-dark" href="{{ route('localisations.retour') }}">Menu</a>
                        </li>
                        <li class="breadcrumb-item text-sm text-dark active" aria-current="page">Localisation Administrative</li>
                    </ol>
                </nav>
                @include('entreprise/components/nav_header')
            </div>
        </nav>


        <!-- End Navbar -->
        <div class="container-fluid py-2">
            <div class="row mt-4">
                <!-- Card principal -->
                <div class="col-12">
                    <div class="card">
                        <!-- En-tête de la carte -->
                        <div class="card-header p-3">
                            <div class="row">
                                <div class="col-md-6">
                                    <h5 class="mb-0">Informations de Localisation</h5>
                                    <p class="text-sm mb-0">Détails de la localisation administrative</p>
                                </div>
                                <div class="col-md-6 text-end">
                                    @if(!localisation)
                                        <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addModal">
                                            <i class="fas fa-plus me-2"></i>Ajouter une localisation
                                        </button>
                                    @else
                                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editModal">
                                            <i class="fas fa-edit me-2"></i>Modifier
                                        </button>
                                    @endif
                                </div>
                            </div>
                        </div>

                        <!-- Corps de la carte -->
                        <div class="card-body p-3">
    @if(localisation)
        <div class="row">
            <!-- Carte Region -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card card-body border-0 shadow-sm h-100">
                    <div class="d-flex flex-column">
                        <div class="icon-shape bg-gradient-primary shadow text-center border-radius-md mb-3">
                            <i class="fas fa-map-marked-alt text-lg opacity-10"></i>
                        </div>
                        <div class="text-center">
                            <p class="text-xs mb-1 text-uppercase font-weight-bold">Région</p>
                            <h5 class="font-weight-bolder mb-0">{{ localisation.region_name }}</h5>
                        </div>
                       
                    </div>
                </div>
            </div>

            <!-- Carte Département -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card card-body border-0 shadow-sm h-100">
                    <div class="d-flex flex-column">
                        <div class="icon-shape bg-gradient-success shadow text-center border-radius-md mb-3">
                            <i class="fas fa-building text-lg opacity-10"></i>
                        </div>
                        <div class="text-center">
                            <p class="text-xs mb-1 text-uppercase font-weight-bold">Département</p>
                            <h5 class="font-weight-bolder mb-0">{{ localisation.departement_name }}</h5>
                        </div>
                       
                    </div>
                </div>
            </div>

            <!-- Carte Commune -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card card-body border-0 shadow-sm h-100">
                    <div class="d-flex flex-column">
                        <div class="icon-shape bg-gradient-warning shadow text-center border-radius-md mb-3">
                            <i class="fas fa-city text-lg opacity-10"></i>
                        </div>
                        <div class="text-center">
                            <p class="text-xs mb-1 text-uppercase font-weight-bold">Commune</p>
                            <h5 class="font-weight-bolder mb-0">{{ localisation.commune_name }}</h5>
                        </div>
                       
                    </div>
                </div>
            </div>

            <!-- Carte Secteur -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card card-body border-0 shadow-sm h-100">
                    <div class="d-flex flex-column">
                        <div class="icon-shape bg-gradient-info shadow text-center border-radius-md mb-3">
                            <i class="fas fa-map-signs text-lg opacity-10"></i>
                        </div>
                        <div class="text-center">
                            <p class="text-xs mb-1 text-uppercase font-weight-bold">Secteur</p>
                            <h5 class="font-weight-bolder mb-0">{{ localisation.secteur_name }}</h5>
                        </div>
                       
                    </div>
                </div>
            </div>

            <!-- Carte Ville -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card card-body border-0 shadow-sm h-100">
                    <div class="d-flex flex-column">
                        <div class="icon-shape bg-gradient-warning shadow text-center border-radius-md mb-3">
                            <i class="fas fa-building text-lg opacity-10"></i>
                        </div>
                        <div class="text-center">
                            <p class="text-xs mb-1 text-uppercase font-weight-bold">Ville</p>
                            <h5 class="font-weight-bolder mb-0">{{ localisation.ville_name }}</h5>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Carte Code Agent -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card card-body border-0 shadow-sm h-100">
                    <div class="d-flex flex-column">
                        <div class="icon-shape bg-gradient-danger shadow text-center border-radius-md mb-3">
                            <i class="fas fa-user-tag text-lg opacity-10"></i>
                        </div>
                        <div class="text-center">
                            <p class="text-xs mb-1 text-uppercase font-weight-bold">Code Agent</p>
                            <h5 class="font-weight-bolder mb-0">{{ localisation.code_agent }}</h5>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Carte Date de création -->
            <div class="col-md-6 col-lg-3 mb-4">
                <div class="card card-body border-0 shadow-sm h-100">
                    <div class="d-flex flex-column">
                        <div class="icon-shape bg-gradient-dark shadow text-center border-radius-md mb-3">
                            <i class="fas fa-calendar-alt text-lg opacity-10"></i>
                        </div>
                        <div class="text-center">
                            <p class="text-xs mb-1 text-uppercase font-weight-bold">Date de création</p>
                            <h5 class="font-weight-bolder mb-0">{{ localisation.createdAt }}</h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bouton Supprimer -->
        <div class="row mt-4">
            <div class="col-12 text-end">
                <button class="btn btn-danger" onclick="confirmDelete('{{ localisation.id }}')">
                    <i class="fas fa-trash me-2"></i>Supprimer tout
                </button>
            </div>
        </div>
    @else
    <div class="text-center py-5">
        <div class="icon-shape bg-gradient-info shadow-info mb-4" style="width: 80px; height: 80px; margin: 0 auto;">
            <i class="fas fa-map-signs text-white text-xl"></i>
        </div>
        <h4 class="text-gradient text-info">Aucune localisation trouvée</h4>
        <p class="text-muted">Cliquez sur le bouton "Ajouter une localisation" pour commencer</p>
    </div>

    @endif
</div>
                    </div>
                </div>
            </div>
            @include('entreprise/components/footer')
            @include('entreprise/corrigee/locAdministrative/add')
            @include('entreprise/corrigee/locAdministrative/edit')
            @include('entreprise/corrigee/locAdministrative/delete')
        </div>


    </main>

    @include('entreprise/layout/script')


    <script>
        document.addEventListener('DOMContentLoaded', function() {
          const gridBtn = document.getElementById('grid-view');
          const listBtn = document.getElementById('list-view');
          const container = document.querySelector('.row.g-3');
        
          gridBtn.addEventListener('click', function() {
            container.classList.remove('view-list');
            gridBtn.classList.add('active');
            listBtn.classList.remove('active');
          });
        
          listBtn.addEventListener('click', function() {
            container.classList.add('view-list');
            listBtn.classList.add('active'); 
            gridBtn.classList.remove('active');
          });
        });

        function confirmDelete(id) {
          $('#ModalDelete').modal('show');
          $('#deleteing_id').val(id);
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            const regionSelect = document.getElementById('region_id_edit')
            
            // Charger les régions au démarrage
            try {
              const response = await fetch('/api/regions')
              const regions = await response.json()
              
              regionSelect.innerHTML = '<option value="">Sélectionner une région</option>'
              regions.forEach(region => {
                const option = document.createElement('option')
                option.value = region.id
                option.textContent = region.name
                regionSelect.appendChild(option)
              })
            } catch (error) {
              console.error('Erreur lors du chargement des régions:', error)
            }
            
            // Le reste du code pour la cascade des sélections...
            // Fonction pour mettre à jour une liste déroulante
            async function updateSelect(url, selectElement) {
              try {
                const response = await fetch(url)
                const data = await response.json()
                
                // Vider la liste sauf la première option
                selectElement.innerHTML = '<option value="">Sélectionner...</option>'
                
                // Ajouter les nouvelles options
                data.forEach(item => {
                  const option = document.createElement('option')
                  option.value = item.id
                  option.textContent = item.name
                  selectElement.appendChild(option)
                })
              } catch (error) {
                console.error('Erreur:', error)
              }
            }
          
            // Gestionnaires d'événements pour les changements de sélection
            const departementSelect = document.getElementById('departement_id_edit')
            const communeSelect = document.getElementById('commune_id_edit')
            
            regionSelect.addEventListener('change', function() {
              if (this.value) {
                updateSelect(`/api/departements/${this.value}`, departementSelect)
                // Réinitialiser les sélections suivantes
                communeSelect.innerHTML = '<option value="">Sélectionner une commune</option>'
                document.getElementById('secteur_id_edit').innerHTML = '<option value="">Sélectionner un secteur</option>'
              }
            })
          
            departementSelect.addEventListener('change', function() {
              if (this.value) {
                updateSelect(`/api/communes/${this.value}`, communeSelect)
                // Réinitialiser la sélection suivante
                document.getElementById('secteur_id_edit').innerHTML = '<option value="">Sélectionner un secteur</option>'
              }
            })
          
            communeSelect.addEventListener('change', function() {
              if (this.value) {
                updateSelect(`/api/secteurs/${this.value}`, document.getElementById('secteur_id_edit'))
              }
            })
          })
    </script>
    <script>
document.addEventListener('DOMContentLoaded', async function() {
    const regionSelect = document.getElementById('region_id')
    const departementSelect = document.getElementById('departement_id')
    const communeSelect = document.getElementById('commune_id')
    const secteurSelect = document.getElementById('secteur_id')
    const villeSelect = document.getElementById('ville_id')
    
    // Charger les régions au démarrage
    try {
        const response = await fetch('/api/regions')
        const regions = await response.json()
        
        regionSelect.innerHTML = '<option value="">Sélectionner une région</option>'
        regions.forEach(region => {
            const option = document.createElement('option')
            option.value = region.id 
            option.textContent = region.name
            regionSelect.appendChild(option)
        })
    } catch (error) {
        console.error('Erreur lors du chargement des régions:', error)
    }

    // Fonction pour mettre à jour les listes dépendantes
    async function updateSelect(url, selectElement) {
        try {
            const response = await fetch(url)
            const data = await response.json()
            
            selectElement.innerHTML = '<option value="">Sélectionner...</option>'
            data.forEach(item => {
                const option = document.createElement('option')
                option.value = item.id
                option.textContent = item.name
                selectElement.appendChild(option)
            })
        } catch (error) {
            console.error('Erreur:', error)
        }
    }

    // Gestionnaires d'événements pour les changements de sélection
    regionSelect.addEventListener('change', function() {
        if (this.value) {
            updateSelect(`/api/departements/${this.value}`, departementSelect)
            // Réinitialiser les sélections suivantes
            communeSelect.innerHTML = '<option value="">Sélectionner une commune</option>'
            secteurSelect.innerHTML = '<option value="">Sélectionner un secteur</option>'
        }
    })

    departementSelect.addEventListener('change', function() {
        if (this.value) {
            updateSelect(`/api/communes/${this.value}`, communeSelect)
            // Réinitialiser le secteur
            secteurSelect.innerHTML = '<option value="">Sélectionner un secteur</option>'
        }
    })

    communeSelect.addEventListener('change', function() {
        if (this.value) {
            updateSelect(`/api/villes/${this.value}`, villeSelect)
            // Réinitialiser la sélection suivante
            secteurSelect.innerHTML = '<option value="">Sélectionner un secteur</option>'
        }
    })

    villeSelect.addEventListener('change', function() {
        if (this.value) {
            updateSelect(`/api/secteurs/${this.value}`, secteurSelect)
        }
    })
})
</script>
<script>
document.addEventListener('DOMContentLoaded', async function() {
    const editModal = document.getElementById('editModal')
    const regionSelect = document.getElementById('region_id_edit')
    const departementSelect = document.getElementById('departement_id_edit')
    const communeSelect = document.getElementById('commune_id_edit')
    const villeSelect = document.getElementById('ville_id_edit')
    const secteurSelect = document.getElementById('secteur_id_edit')

    // Fonction pour mettre à jour les selects
    async function updateSelect(url, selectElement) {
        try {
            const response = await fetch(url)
            const data = await response.json()
            
            selectElement.innerHTML = '<option value="">Sélectionner...</option>'
            data.forEach(item => {
                const option = document.createElement('option')
                option.value = item.id
                option.textContent = item.name
                selectElement.appendChild(option)
            })
        } catch (error) {
            console.error('Erreur:', error)
        }
    }

    // Chargement initial des données
    async function loadInitialData() {
        try {
            const response = await fetch('/api/regions')
            const regions = await response.json()
            updateSelect(regionSelect, regions)

            // Récupérer les données de localisation existantes
            const localisationResponse = await fetch('/api/localisations/current')
            const localisation = await localisationResponse.json()

            if (localisation) {
                // Pré-remplir les champs
                document.getElementById('code_agent_edit').value = localisation.code_agent
                regionSelect.value = localisation.region_id

                // Charger et sélectionner le département
                await updateSelect(`/api/departements/${localisation.region_id}`, departementSelect)
                departementSelect.value = localisation.departement_id

                // Charger et sélectionner la commune
                await updateSelect(`/api/communes/${localisation.departement_id}`, communeSelect)
                communeSelect.value = localisation.commune_id

                // Charger et sélectionner la ville
                await updateSelect(`/api/villes/${localisation.commune_id}`, villeSelect)
                villeSelect.value = localisation.ville_id

                // Charger et sélectionner le secteur
                await updateSelect(`/api/secteurs/${localisation.ville_id}`, secteurSelect)
                secteurSelect.value = localisation.secteur_id
            }
        } catch (error) {
            console.error('Erreur lors du chargement des données:', error)
        }
    }

    // Événements de changement pour la cascade
    regionSelect.addEventListener('change', function() {
        if (this.value) {
            updateSelect(`/api/departements/${this.value}`, departementSelect)
            communeSelect.innerHTML = '<option value="">Sélectionner une commune</option>'
            villeSelect.innerHTML = '<option value="">Sélectionner une ville</option>'
            secteurSelect.innerHTML = '<option value="">Sélectionner un secteur</option>'
        }
    })

    departementSelect.addEventListener('change', function() {
        if (this.value) {
            updateSelect(`/api/communes/${this.value}`, communeSelect)
            villeSelect.innerHTML = '<option value="">Sélectionner une ville</option>'
            secteurSelect.innerHTML = '<option value="">Sélectionner un secteur</option>'
        }
    })

    communeSelect.addEventListener('change', function() {
        if (this.value) {
            updateSelect(`/api/villes/${this.value}`, villeSelect)
            secteurSelect.innerHTML = '<option value="">Sélectionner un secteur</option>'
        }
    })

    villeSelect.addEventListener('change', function() {
        if (this.value) {
            updateSelect(`/api/secteurs/${this.value}`, secteurSelect)
        }
    })

    // Charger les données lors de l'ouverture du modal
    editModal.addEventListener('show.bs.modal', function() {
        loadInitialData()
    })
})
</script>
<script>
document.addEventListener('DOMContentLoaded', async function() {
    const editModal = document.getElementById('editModal')
    
    // Fonction pour charger les données de la localisation
    async function loadLocalisationData() {
        try {
            const response = await fetch('/api/localisations/current')
            const localisation = await response.json()
            
            if (localisation) {
                // Remplir l'ID caché
                document.getElementById('localisation_id_edit').value = localisation.id
                
                // Remplir le code agent
                document.getElementById('code_agent_edit').value = localisation.code_agent
                
                // Charger et sélectionner la région
                const regions = await fetch('/api/regions').then(r => r.json())
                updateSelect('region_id_edit', regions)
                document.getElementById('region_id_edit').value = localisation.region_id
                
                // Charger et sélectionner le département
                const departements = await fetch(`/api/departements/${localisation.region_id}`).then(r => r.json())
                updateSelect('departement_id_edit', departements)
                document.getElementById('departement_id_edit').value = localisation.departement_id
                
                // Charger et sélectionner la commune
                const communes = await fetch(`/api/communes/${localisation.departement_id}`).then(r => r.json())
                updateSelect('commune_id_edit', communes)
                document.getElementById('commune_id_edit').value = localisation.commune_id
                
                // Charger et sélectionner la ville
                const villes = await fetch(`/api/villes/${localisation.commune_id}`).then(r => r.json())
                updateSelect('ville_id_edit', villes)
                document.getElementById('ville_id_edit').value = localisation.ville_id
                
                // Charger et sélectionner le secteur
                const secteurs = await fetch(`/api/secteurs/${localisation.ville_id}`).then(r => r.json())
                updateSelect('secteur_id_edit', secteurs)
                document.getElementById('secteur_id_edit').value = localisation.secteur_id
            }
        } catch (error) {
            console.error('Erreur:', error)
        }
    }

    // Fonction utilitaire pour mettre à jour un select
    function updateSelect(selectId, data) {
        const select = document.getElementById(selectId)
        select.innerHTML = '<option value="">Sélectionner...</option>'
        data.forEach(item => {
            const option = document.createElement('option')
            option.value = item.id
            option.textContent = item.name
            select.appendChild(option)
        })
    }

    // Charger les données quand le modal s'ouvre
    editModal.addEventListener('show.bs.modal', loadLocalisationData)
})
</script>
</body>
</html>